{"version":3,"sources":["apollo.ts","components/Header.tsx","pages/tasks/Form.tsx","hooks/useForm.ts","queries/tasks.ts","hooks/useTasks.ts","pages/tasks/New.tsx","pages/tasks/Edit.tsx","pages/tasks/Item.tsx","pages/tasks/List.tsx","pages/tasks/index.tsx","pages/home/index.tsx","pages/App.tsx","index.tsx"],"names":["client","ApolloClient","cache","InMemoryCache","uri","process","Header","match","useRouteMatch","pageButton","label","to","currentPage","params","page","className","TaskForm","initialState","handleAction","useState","formState","setFormState","handleChange","event","target","tagName","name","value","parsedValue","handleSubmit","preventDefault","useForm","activeRecord","submitAction","onSubmit","type","onChange","GET_TASKS","gql","GET_TASK","CREATE_TASK","UPDATE_TASK","REMOVE_TASK","useTasks","options","refetchQueries","query","awaitRefetchQueries","useMutation","createTask","updateTask","removeTask","TaskNew","history","useHistory","task","variables","push","TaskEdit","id","useParams","useQuery","loading","data","error","JSON","stringify","TaskItem","onClick","TaskList","message","networkError","tasks","map","TaskIndex","path","HomeIndex","App","basename","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.ac10744e.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: `${process.env.REACT_APP_API}/graphql`,\n});\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\ninterface IRouteMatch {\n  page: string;\n}\n\nexport const Header: React.FC = () => {\n  const match = useRouteMatch<IRouteMatch>('/:page');\n\n  const pageButton = (label: string, to: string) => {\n    const currentPage = match?.params?.page || '';\n    const className = to === `/${currentPage}` ? 'bt bt-active' : 'bt';\n    return (\n      <Link to={to} className={className}>\n        {label}\n      </Link>\n    );\n  };\n\n  return (\n    <header>\n      <h1>\n        <div className=\"title\">React Router CRUD</div>\n        <div className=\"subtitle\">With GraphQL And TypeScript</div>\n      </h1>\n      <div className=\"navigation\">\n        {pageButton('Home', '/')}\n        {pageButton('Tasks', '/tasks')}\n      </div>\n    </header>\n  );\n};\n","import React from 'react';\nimport { Task } from '../../types/tasks';\nimport { useForm } from '../../hooks/useForm';\n\ninterface IProps {\n  activeRecord: Task;\n  submitAction: Function;\n}\n\nexport const TaskForm: React.FC<IProps> = ({ activeRecord, submitAction }) => {\n  const { formState, handleChange, handleSubmit } = useForm<Task>(\n    activeRecord,\n    submitAction\n  );\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={formState.name}\n            onChange={handleChange}\n          />\n        </div>\n        <input type=\"submit\" />\n      </form>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nexport type IChangeElement =\n  | HTMLInputElement\n  | HTMLSelectElement\n  | HTMLTextAreaElement;\n\nexport const useForm = <T>(initialState: T, handleAction: Function) => {\n  const [formState, setFormState] = useState<T>(initialState);\n\n  const handleChange = (event: React.ChangeEvent<IChangeElement>): void => {\n    const { tagName, name, value } = event.target;\n    const parsedValue = tagName === 'SELECT' && value === '' ? null : value;\n    setFormState({ ...formState, [name]: parsedValue });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    handleAction(formState);\n  };\n\n  return { formState, handleChange, handleSubmit };\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_TASKS = gql`\n  {\n    tasks {\n      id\n      name\n    }\n  }\n`;\n\nexport const GET_TASK = gql`\n  query ($id: ID!) {\n    task(id: $id) {\n      id\n      name\n    }\n  }\n`;\n\nexport const CREATE_TASK = gql`\n  mutation ($name: String!) {\n    createTask(name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nexport const UPDATE_TASK = gql`\n  mutation ($id: ID!, $name: String!) {\n    updateTask(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nexport const REMOVE_TASK = gql`\n  mutation ($id: ID!) {\n    removeTask(id: $id)\n  }\n`;\n","import { useMutation } from '@apollo/client';\nimport { TaskData } from '../types/tasks';\nimport {\n  GET_TASKS,\n  CREATE_TASK,\n  UPDATE_TASK,\n  REMOVE_TASK,\n} from '../queries/tasks';\n\nexport const useTasks = () => {\n  const options = {\n    refetchQueries: [{ query: GET_TASKS }],\n    awaitRefetchQueries: true,\n  };\n\n  const [createTask] = useMutation<TaskData>(CREATE_TASK, options);\n  const [updateTask] = useMutation<TaskData>(UPDATE_TASK, options);\n  const [removeTask] = useMutation<TaskData>(REMOVE_TASK, options);\n\n  return { createTask, updateTask, removeTask };\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { TaskForm } from './Form';\nimport { Task } from '../../types/tasks';\nimport { useTasks } from '../../hooks/useTasks';\n\nexport const TaskNew: React.FC = () => {\n  const history = useHistory();\n\n  const { createTask } = useTasks();\n\n  const handleCreate = (task: Task) => {\n    createTask({ variables: task });\n    history.push('/tasks');\n  };\n\n  return (\n    <div className=\"content\">\n      <Link className=\"bt bt-back\" to=\"/tasks\">\n        Back\n      </Link>\n      <h2>New</h2>\n      <TaskForm activeRecord={{ name: '' }} submitAction={handleCreate} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { Task, SingleTaskData } from '../../types/tasks';\nimport { TaskForm } from './Form';\nimport { useTasks } from '../../hooks/useTasks';\nimport { GET_TASK } from '../../queries/tasks';\n\ninterface IParams {\n  id: string;\n}\n\nexport const TaskEdit: React.FC = () => {\n  const { id } = useParams<IParams>();\n  const history = useHistory();\n\n  const { loading, data, error } = useQuery<SingleTaskData>(GET_TASK, {\n    variables: { id },\n  });\n\n  const { updateTask } = useTasks();\n\n  const handleUpdate = (task: Task) => {\n    updateTask({ variables: task });\n    history.push('/tasks');\n  };\n\n  if (loading) return <div className=\"loading\">Loading</div>;\n  if (error) {\n    return <div className=\"error\">{JSON.stringify(error, null, 2)}</div>;\n  }\n  if (!data) return <div className=\"notfound\">Not Found</div>;\n\n  return (\n    <div className=\"content\">\n      <Link className=\"bt bt-back\" to=\"/tasks\">\n        Back\n      </Link>\n      <h2>Edit</h2>\n      <TaskForm activeRecord={data.task} submitAction={handleUpdate} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Task } from '../../types/tasks';\nimport { useTasks } from '../../hooks/useTasks';\n\ninterface IProps {\n  task: Task;\n}\n\nexport const TaskItem: React.FC<IProps> = ({ task }) => {\n  const { removeTask } = useTasks();\n\n  return (\n    <div className=\"item\">\n      <Link to={`/tasks/${task.id}/edit`}>{task.name}</Link>\n      <button\n        className=\"bt-remove\"\n        onClick={() => removeTask({ variables: task })}\n      >\n        X\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { TaskItem } from './Item';\nimport { TaskData } from '../../types/tasks';\nimport { GET_TASKS } from '../../queries/tasks';\n\nexport const TaskList: React.FC = () => {\n  const { loading, data, error } = useQuery<TaskData>(GET_TASKS);\n\n  if (loading) return <div className=\"loading\">Loading...</div>;\n  if (error) {\n    return (\n      <div className=\"error\">\n        <div>{error.message}</div>\n        <pre>{JSON.stringify(error.networkError, null, 2)}</pre>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"content\">\n        <Link to=\"/tasks/new\" className=\"bt bt-new\">\n          New\n        </Link>\n      </div>\n      <div className=\"list\">\n        <ul>\n          {data?.tasks.map((task) => (\n            <li key={task.id}>\n              <TaskItem task={task} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { TaskNew } from './New';\nimport { TaskEdit } from './Edit';\nimport { TaskList } from './List';\n\nexport const TaskIndex: React.FC = () => {\n  return (\n    <div className=\"page\">\n      <Switch>\n        <Route path=\"/tasks/new\">\n          <TaskNew />\n        </Route>\n        <Route path=\"/tasks/:id/edit\">\n          <TaskEdit />\n        </Route>\n        <Route path=\"/tasks\">\n          <TaskList />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const HomeIndex: React.FC = () => {\n  return (\n    <div className=\"content\">\n      <h2>Home</h2>\n      <div>\n        <p>This is a simple example showing how to use React Router:</p>\n        <ul>\n          <li>Home (this page)</li>\n          <li>\n            <Link to=\"/tasks\">Tasks (/tasks)</Link>\n          </li>\n          <li>\n            <Link to=\"/tasks/new\">New Task (/tasks/new)</Link>\n          </li>\n          <li>Edit Task (/tasks/TASK_ID/edit)</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Header } from '../components/Header';\nimport { TaskIndex } from './tasks';\nimport { HomeIndex } from './home';\n\nexport const App: React.FC = () => {\n  return (\n    <div>\n      <Router basename={process.env.REACT_APP_BASENAME}>\n        <Header />\n        <Switch>\n          <Route path=\"/tasks\">\n            <TaskIndex />\n          </Route>\n          <Route path=\"/\">\n            <HomeIndex />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { client } from './apollo';\nimport './assets/index.css';\nimport { App } from './pages/App';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}